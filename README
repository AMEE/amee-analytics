Authors
   James Smith, Andrew Berkeley

Copyright
   Copyright (c) 2011 AMEE UK Ltd

License
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
   of the Software, and to permit persons to whom the Software is furnished to do
   so, subject to the following conditions:

   The above copyright notice and this permission notice shall be include in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.


Brief introduction
The amee-reporting gem provides support for handling collections of the class
<i>AMEE::DataAbstraction::OngoingCalculation</i> and performing analytical
operations across the collection.

The library extends a number of classes within the <i>AMEE::DataAbstraction</i>
module:

1. <i>AMEE::DataAbstraction::CalculationCollection</i> is extended by the
<i>CalculationCollectionReportingSupport</i> module, providing the ability to filter
specific calculation terms, sort by term values, standardize units and perform
analytical operations on specific terms, such as sums, means, modes, and medians

2. <i>AMEE::DataAbstraction::TermsList</i> is extended by the
<i>TermsListReportingSupport</i> module. This provides much of the functionality
used by <i>CalculationCollectionReportingSupport</i>, allowing lists to be sorted
and summed, averaged, etc...

3. <i>AMEE::DataAbstraction::Term</i> is extended by the <i>TermReportingSupport</i>
module. This provides the ability to convert the units within a term (changing the
term value attribute accordingly), and is used by the operations provided in
<i>CalculationCollectionReportingSupport</i> and <i>TermsListReportingSupport</i>.

4. A new subclass of <i>AMEE::DataAbstraction::Term</i> is defined, <i>Result</i>.
This provides a simple container for returing the result of a <i>TermsList</i>
analytical operation (e.g. sum, mean) complete with label, value, unit, etc...

=Example usage

  # find method returns instance of CalculationCollection
  my_calculations = OngoingCalculation.find_by_type(:all, :electricity)

                                    #=> <AMEE::DataAbstraction::CalculationCollection ... >

  # Dynamic label-derived method returns TermsList of the named term from each
  # calculation in the set

  my_calculations.country           #=> <AMEE::DataAbstraction::TermsList ... >

  my_calculations.energy            #=> <AMEE::DataAbstraction::TermsList ... >

  my_calculations.co2               #=> <AMEE::DataAbstraction::TermsList ... >

  # Analytical operations can be applied to lists of terms. These return new
  # objects, of the Result class. #to_s used here for illustrative purposes
  
  my_calculations.country.sum.to_s       #=> "0.0"

  my_calculations.energy.sum.to_s        #=> "23456 kWh"

  my_calculations.co2.sum.to_s           #=> "12345 kg"

  my_calculations.co2.sum(:lb).to_s      #=> "23456 lb"

  my_calculations.country.mode.to_s      #=> "Sweden"

  my_calculations.co2.mean.to_s          #=> "4512.5 kg"

  my_calculations.co2.mean('t').to_s     #=> "4.5125 t"

  my_calculations.co2.median.to_s        #=> "4567 kg"

  my_calculations.co2.predominant_unit   #=> "kg"

  my_calculations.sort_by_co2            #=> <AMEE::DataAbstraction::CalculationCollection ... >

  my_calculations.sort_by_co2!           #=> <AMEE::DataAbstraction::CalculationCollection ... >